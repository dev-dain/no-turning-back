# 그래프 : 여러 노드(vertex)들이 간선(edge, arc)으로 연결된 추상 네트워크
# G=(V,E)

# 무향 그래프는 간선에 방향이 없고, 간선으로 연결된 노드는 서로 인접한 이웃
# 유향 그래프에서는 쌍방이 아닌 이상 단방향임
# 부분 그래프는 그래프 G에서 집합 V, E로 구성된 그래프 일부
# 완전 그래프는 그래프의 모든 노드가 서로 인접한 그래프
# 가중 그래프 : 간선에 가중치(weight)가 있는 그래프

# 차수 : 한 노드에 이어진 간선의 수. 유향 그래프는 입력/출력 차수로 나눌 수 있음
# 경로(path) : 간선이 어느 노드도 다시 방문하지 않고 노드가 일렬로 연결된 부분 그래프
# cycle : 경로와 같지만 마지막에 연결된 간선 노드가 다시 첫 번째 노드에 연결됨


# 인접 리스트(각 노드에서 이웃 리스트에 접근 가능)
# 아래 모든 방식이 유/무향 리스트 표현 가능
# sets in list
a, b, c, d, e, f = range(6) # a:0~f:5
N = [{b,c,d,f}, {a,d,f}, {a,b,d,e}, {a,e}, {a,b,c}, {b,c,d,e}]
print(b in N[a])
print(b in N[b])
print(len(N[f]))

# lists in list
N1 = [[b,c,d,f], [a,d,f], [a,b,d,e], [a,e], [a,b,c], [b,c,d,e]]
print(b in N1[a])
print(b in N1[b])
print(len(N1[f]))

# dicts in list
N2 = [
  # a 노드와 b 노드 간선 가중치는 2
  {b: 2, c: 1, d: 4, f: 1},
  {a: 4, d: 1, f: 4},
  {a: 1, b: 1, d: 2, e: 4},
  {a: 3, e: 2},
  {a: 3, b: 4, c: 1},
  {b: 1, c: 2, d: 4, e: 3}
]
print(b in N2[a])
print(len(N2[f]))
print(N2[a][b]) # (a, b)의 엣지 가중치

# dict
N3 = { 
  'a': set('bcdf'),
  'b': set('adf'),
  'c': set('abde'),
  'd': set('ae'),
  'e': set('abc'),
  'f': set('bcde')
}
print('b' in N3['a'])



# 인접 행렬 : 각 노드의 모든 이웃에 대해 하나의 행을 가짐 (1/0)
# 행렬의 대각선 요소는 항상 0
N4 = [[0,1,1,1,0,1], [1,0,0,1,0,1], [1,1,0,1,1,0],
      [1,0,0,0,1,0], [1,1,1,0,0,0], [0,1,1,1,1,0]]
print(N4[a][b]) # (a, b) 간선 있음
print(N4[a][e]) # (a, e) 간선 없음
print(sum(N4[f])) # f의 간선 4개

# 인접 행렬에 가중치를 추가하려면 1, 0이 아닌 다른 값으로 바꾸면 됨
# 존재하지 않는 간선은 None이나 -1로 나타냄
N5 = [[-1, 2, 1, 4, -1, 1], [4, -1, -1, 1, -1, 4], [1, 1, -1, 2, 4, -1],
      [3, -1, -1, -1, 2, -1], [3, 4, 1, -1, -1, -1], [1, 2, -1, 4, 3, -1]]
print(N5[a][b])
print(sum([1 for i in N5[c] if i != -1])) # 차수 구하기
